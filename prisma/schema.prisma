// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  // id            String    @id @default(cuid())
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(USER)

  accounts Account[]
  sessions Session[]
  exchangeAccounts   ExchangeAccount[]
  copyTradingSettings CopyTradingSetting[]
  loginLogs     LoginLog[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model ExchangeAccount {
  id                String   @id @default(cuid())
  userId            String
  accountName       String
  exchangeName      String
  apiKey            String
  secretKey         String
  passphrase        String?
  balance           String?
  description       String?
  enabled           Boolean  @default(true)
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // copyTradingSettings CopyTradingSetting[]
  copyTradingAccount CopyTradingAccount[]
  copyTradingTradeHistory CopyTradingTradeHistory[]
  copyTradingActivePosition CopyTradingActivePosition[]

  @@index([userId])
  @@map(name: "exchange_accounts")
}

model CopyTradingSetting {
  id                String    @id @default(cuid())
  userId            String
  traderName        String
  traderId          String
  avatarUrl         String
  fixedAmount       Int?
  multiplierAmount  Float?
  takeProfit        Int?
  stopLoss          Int?
  rpnl              Float     @default(0)
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  endDate           DateTime? @map(name: "end_date")
  status            String    @default("active") // active ended

  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  followedApis   CopyTradingAccount[]
  // activePositions   ActiveCopyTradingPosition[]
  // historyPositions  CopyTradingPositionHistory[]
  
  @@index([userId, traderId])
  @@map(name: "copy_trading_settings")
}

model CopyTradingAccount {
  copyTradingSettingId String
  exchangeAccountId    String

  copyTradingSetting  CopyTradingSetting @relation(fields: [copyTradingSettingId], references: [id], onDelete: Cascade)
  exchangeAccount     ExchangeAccount    @relation(fields: [exchangeAccountId], references: [id], onDelete: Cascade)

  @@id([copyTradingSettingId, exchangeAccountId])
  @@map(name: "copy_trading_accounts")
}

model CopyTradingTradeHistory {
  id                    String   @id @default(cuid())
  copyTradingSettingId  String
  exchangeAccountId     String
  symbol                String
  side                  String   // long, short
  entryPrice            Float
  size                  Float
  // leverage              Int?
  realizedPnl           String?
  error                 String?
  openTime              DateTime @default(now())
  // copyTradingSetting    CopyTradingSetting @relation(fields: [copyTradingSettingId], references: [id], onDelete: Cascade)
  exchangeAccount       ExchangeAccount    @relation(fields: [exchangeAccountId], references: [id], onDelete: Cascade)

  @@index([copyTradingSettingId, exchangeAccountId])
  @@map(name: "copy_trading_trade_history")
}

model CopyTradingActivePosition {
  id                    String   @id @default(cuid())
  copyTradingSettingId  String
  exchangeAccountId     String
  symbol                String
  side                  String   // long, short
  entryPrice            Float
  exitPrice             Float
  size                  Float
  leverage              Int?
  openTime              DateTime @default(now())
  realizedPnl           String
  // copyTradingSetting    CopyTradingSetting @relation(fields: [copyTradingSettingId], references: [id], onDelete: Cascade)
  exchangeAccount       ExchangeAccount    @relation(fields: [exchangeAccountId], references: [id], onDelete: Cascade)

  @@index([copyTradingSettingId])
  @@map(name: "copy_trading_active_positions")
}

model CopyTradingPositionHistory {
  id                    String   @id @default(cuid())
  copyTradingSettingId  String
  symbol                String
  side                  String   // long, short
  entryPrice            Float
  exitPrice             Float
  size                  Float
  leverage              Int?
  openTime              DateTime
  closeTime             DateTime @default(now())
  realizedPnl           String
  // copyTradingSetting    CopyTradingSetting @relation(fields: [copyTradingSettingId], references: [id], onDelete: Cascade)

  @@index([copyTradingSettingId])
  @@map(name: "copy_trading_position_history")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model LoginLog {
  id        String   @id @default(cuid())
  userId    String
  ip        String
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "login_logs")
}

// model Waitlist {
//   id        Int      @id @default(autoincrement())
//   email     String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
